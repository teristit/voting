"""
Telegram Bot –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "Smart Award" –ë–ï–ó WebApp

–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ù–∏–∫–∞–∫–∏—Ö WebApp, —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç.
"""

import logging
import asyncio
from typing import Dict, List, Optional, Tuple
from decimal import Decimal

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

from django.conf import settings
from django.contrib.auth import get_user_model
from django.utils import timezone
from apps.sessions.models import VotingSession, SessionParticipant
from apps.voting.models import Vote
from apps.results.models import SessionResult
from apps.core.utils import get_logger

logger = get_logger('telegram_bot')
User = get_user_model()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_TARGET, ENTERING_SCORE = range(2)


class SmartAwardBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –±–µ–∑ WebApp
    """
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        """
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_user = await self._get_or_register_user(user)
            
            if system_user and system_user.is_active:
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {system_user.get_display_name()}!\n\n"
                    f"üèÜ –°–∏—Å—Ç–µ–º–∞ \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\"\n"
                    f"üìã –†–æ–ª—å: {system_user.get_role_display()}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: {system_user.get_status_display()}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:"
                )
            else:
                welcome_text = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\".\n"
                    f"üîë –í–∞—à Telegram ID: `{user.id}`\n\n"
                    "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
            
            keyboard = self._get_main_keyboard(system_user)
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def vote_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        """
        user = update.effective_user
        
        try:
            system_user = await self._get_system_user(user.id)
            if not system_user or not system_user.is_voting_eligible():
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ."
                )
                return ConversationHandler.END
            
            session = await self._get_current_session()
            if not session:
                await update.message.reply_text(
                    "üìÖ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
                )
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            targets = await self._get_vote_targets(session, system_user)
            if not targets:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
                )
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            context.user_data['session'] = session
            context.user_data['targets'] = targets
            context.user_data['current_votes'] = {}
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
            keyboard = self._create_targets_keyboard(targets)
            
            await update.message.reply_text(
                f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ #{session.id}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {session.start_date} - {session.end_date}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                reply_markup=keyboard
            )
            
            return SELECTING_TARGET
            
        except Exception as e:
            logger.error(f"Error in vote_start: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
            )
            return ConversationHandler.END
    
    async def target_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–ª–µ–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        """
        query = update.callback_query
        await query.answer()
        
        target_id = int(query.data.split('_')[1])
        targets = context.user_data.get('targets', [])
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        selected_target = None
        for target in targets:
            if target.id == target_id:
                selected_target = target
                break
        
        if not selected_target:
            await query.edit_message_text(
                "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /vote"
            )
            return ConversationHandler.END
        
        context.user_data['selected_target'] = selected_target
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ (0-10)
        keyboard = []
        for i in range(0, 11):
            if i % 5 == 0:  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–µ 5 –∫–Ω–æ–ø–æ–∫
                keyboard.append([])
            keyboard[-1].append(
                InlineKeyboardButton(str(i), callback_data=f"score_{i}")
            )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])
        
        await query.edit_message_text(
            f"üéØ –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É:\n"
            f"üë§ **{selected_target.get_display_name()}**\n"
            f"üè¢ {selected_target.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (0-10):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return ENTERING_SCORE
    
    async def score_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ü–µ–Ω–∫—É
        """
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "cancel":
            await query.edit_message_text(
                "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞: /vote"
            )
            return ConversationHandler.END
        
        try:
            score = int(data.split('_')[1])
            session = context.user_data['session']
            target = context.user_data['selected_target']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
            system_user = await self._get_system_user(update.effective_user.id)
            vote_saved = await self._save_vote(session, system_user, target, score)
            
            if vote_saved:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤
                context.user_data['current_votes'][target.id] = score
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                remaining_targets = [t for t in context.user_data['targets'] if t.id not in context.user_data['current_votes']]
                
                success_text = (
                    f"‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
                    f"üë§ {target.get_display_name()}: **{score}** –±–∞–ª–ª–æ–≤\n\n"
                )
                
                if remaining_targets:
                    success_text += (
                        f"üìã –û—Å—Ç–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å: {len(remaining_targets)} —á–µ–ª.\n"
                        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?"
                    )
                    
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_voting")],
                        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_voting")]
                    ])
                else:
                    success_text += "‚úÖ –í—Å–µ –≥–æ–ª–æ—Å–∞ –æ—Ç–¥–∞–Ω—ã!"
                    keyboard = None
                
                await query.edit_message_text(
                    success_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                if not remaining_targets:
                    return ConversationHandler.END
                
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞."
                )
                return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error saving vote: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞."
            )
            return ConversationHandler.END
        
        return SELECTING_TARGET
    
    async def continue_or_finish(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        """
        query = update.callback_query
        await query.answer()
        
        if query.data == "continue_voting":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            targets = context.user_data.get('targets', [])
            current_votes = context.user_data.get('current_votes', {})
            remaining_targets = [t for t in targets if t.id not in current_votes]
            
            if remaining_targets:
                keyboard = self._create_targets_keyboard(remaining_targets)
                await query.edit_message_text(
                    f"üìã –û—Å—Ç–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å: {len(remaining_targets)}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–ª–ª–µ–≥—É:",
                    reply_markup=keyboard
                )
                return SELECTING_TARGET
            else:
                await query.edit_message_text(
                    "‚úÖ –í—Å–µ –≥–æ–ª–æ—Å–∞ –æ—Ç–¥–∞–Ω—ã!"
                )
                return ConversationHandler.END
        
        elif query.data == "finish_voting":
            current_votes = context.user_data.get('current_votes', {})
            await query.edit_message_text(
                f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏: **{len(current_votes)}** –∫–æ–ª–ª–µ–≥\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /results –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        
        return ConversationHandler.END
    
    async def results_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /results - –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        user = update.effective_user
        
        try:
            system_user = await self._get_system_user(user.id)
            if not system_user:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            latest_result = await self._get_user_latest_result(system_user)
            
            if not latest_result:
                await update.message.reply_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
                    "–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: /vote"
                )
                return
            
            results_text = (
                f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**\n\n"
                f"üìÖ –°–µ—Å—Å–∏—è: {latest_result.session.start_date} - {latest_result.session.end_date}\n"
                f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: **{latest_result.average_score:.2f}**\n"
                f"üèÜ –ú–µ—Å—Ç–æ: **{latest_result.rank or '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'}**\n"
                f"üí∞ –ü—Ä–µ–º–∏—è: **{latest_result.bonus_amount:.2f} ‚ÇΩ**\n"
                f"üë• –ì–æ–ª–æ—Å–æ–≤: **{latest_result.votes_received}**\n\n"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            all_results = await self._get_user_results_history(system_user, limit=5)
            if len(all_results) > 1:
                results_text += "üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
                for i, result in enumerate(all_results[:5], 1):
                    results_text += (
                        f"{i}. {result.session.start_date.strftime('%d.%m')}: "
                        f"{result.average_score:.1f} –±. (–º–µ—Å—Ç–æ {result.rank or '?'})\n"
                    )
            
            await update.message.reply_text(
                results_text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in results_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞
        """
        help_text = (
            "ü§ñ **–ë–æ—Ç —Å–∏—Å—Ç–µ–º—ã \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\"**\n\n"
            "üìù **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/vote - –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "/results - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üéØ **–ö–∞–∫ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:**\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ /vote\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–≥—É\n"
            "3. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É 0-10\n"
            "4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö\n\n"
            "üìà –ü—Ä–µ–º–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏."
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        """
        user = update.effective_user
        
        try:
            system_user = await self._get_system_user(user.id)
            if not system_user:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            session = await self._get_current_session()
            
            if not session:
                await update.message.reply_text(
                    "üìÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π."
                )
                return
            
            participants_count = session.get_participants_count()
            voters_count = session.get_voters_count()
            user_voted = await self._has_user_voted(session, system_user)
            
            status_text = (
                f"üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ #{session.id}**\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {session.start_date} - {session.end_date}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
                f"‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {voters_count}\n"
                f"üìà –£—á–∞—Å—Ç–∏–µ: {session.get_participation_rate():.1f}%\n\n"
                f"üîÑ –í–∞—à —Å—Ç–∞—Ç—É—Å: {'\u2705 –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏' if user_voted else '‚ùå –ù–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏'}\n\n"
            )
            
            if not user_voted and session.can_vote_today():
                status_text += "üó≥Ô∏è –ú–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å: /vote"
            elif session.closed_at:
                status_text += "üîí –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: /results"
            else:
                status_text += "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏..."
            
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in status_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
            )
    
    def cancel_voting(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        """
        update.message.reply_text(
            "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        return ConversationHandler.END
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def _get_or_register_user(self, telegram_user):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            user, created = await User.objects.aget_or_create(
                telegram_id=telegram_user.id,
                defaults={
                    'username': telegram_user.username or f'user_{telegram_user.id}',
                    'first_name': telegram_user.first_name or '',
                    'last_name': telegram_user.last_name or '',
                    'telegram_username': telegram_user.username or '',
                    'is_active': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–∏—Ç –∞–¥–º–∏–Ω
                }
            )
            if created:
                logger.info(f"New user registered: {telegram_user.id} - {telegram_user.username}")
            return user
        except Exception as e:
            logger.error(f"Error creating user: {e}", exc_info=True)
            return None
    
    async def _get_system_user(self, telegram_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            return await User.objects.aget(telegram_id=telegram_id)
        except User.DoesNotExist:
            return None
    
    async def _get_current_session(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é"""
        today = timezone.now().date()
        try:
            return await VotingSession.objects.filter(
                active=True,
                start_date__lte=today,
                end_date__gte=today
            ).afirst()
        except Exception:
            return None
    
    async def _get_vote_targets(self, session: VotingSession, voter: User):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
        participants = SessionParticipant.objects.filter(
            session=session,
            can_receive_votes=True,
            participant_status='active'
        ).select_related('user').exclude(user=voter)
        
        targets = []
        async for participant in participants:
            if participant.user.can_be_voted_for():
                targets.append(participant.user)
        
        return targets
    
    async def _save_vote(self, session, voter, target, score):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å"""
        try:
            vote, created = await Vote.objects.aupdate_or_create(
                session=session,
                voter=voter,
                target=target,
                defaults={'score': score}
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            voter.last_vote_date = timezone.now()
            await voter.asave(update_fields=['last_vote_date'])
            
            logger.info(f"Vote saved: {voter.id} -> {target.id} = {score} (created: {created})")
            return True
            
        except Exception as e:
            logger.error(f"Error saving vote: {e}", exc_info=True)
            return False
    
    async def _has_user_voted(self, session, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return await Vote.objects.filter(session=session, voter=user).aexists()
    
    async def _get_user_latest_result(self, user):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await SessionResult.objects.select_related('session').filter(
                user=user
            ).order_by('-session__end_date').afirst()
        except Exception:
            return None
    
    async def _get_user_results_history(self, user, limit=5):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results = []
        async for result in SessionResult.objects.select_related('session').filter(
            user=user
        ).order_by('-session__end_date')[:limit]:
            results.append(result)
        return results
    
    def _get_main_keyboard(self, system_user):
        """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        if not system_user or not system_user.is_active:
            return None
        
        keyboard = [
            [KeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"), KeyboardButton("üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    
    def _create_targets_keyboard(self, targets):
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏"""
        keyboard = []
        
        for target in targets:
            display_name = target.get_display_name()
            if target.position:
                display_name += f" ({target.position})"
            
            keyboard.append([InlineKeyboardButton(
                display_name,
                callback_data=f"target_{target.id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel"
        )])
        
        return InlineKeyboardMarkup(keyboard)


def create_bot_application() -> Application:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞
    """
    bot = SmartAwardBot()
    application = Application.builder().token(bot.token).build()
    
    # ConversationHandler –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    vote_handler = ConversationHandler(
        entry_points=[
            CommandHandler('vote', bot.vote_start),
            MessageHandler(filters.Regex(r'^üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å$'), bot.vote_start)
        ],
        states={
            SELECTING_TARGET: [
                CallbackQueryHandler(bot.target_selected, pattern=r'^target_\d+$')
            ],
            ENTERING_SCORE: [
                CallbackQueryHandler(bot.score_entered, pattern=r'^score_\d+$'),
                CallbackQueryHandler(bot.continue_or_finish, pattern=r'^(continue_voting|finish_voting)$')
            ],
        },
        fallbacks=[
            CommandHandler('cancel', bot.cancel_voting),
            CallbackQueryHandler(bot.cancel_voting, pattern='^cancel$')
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(vote_handler)
    application.add_handler(CommandHandler('start', bot.start_command))
    application.add_handler(CommandHandler('results', bot.results_command))
    application.add_handler(CommandHandler('status', bot.status_command))
    application.add_handler(CommandHandler('help', bot.help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    application.add_handler(MessageHandler(
        filters.Regex(r'^üìä –°—Ç–∞—Ç—É—Å$'), 
        bot.status_command
    ))
    application.add_handler(MessageHandler(
        filters.Regex(r'^üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã$'), 
        bot.results_command
    ))
    application.add_handler(MessageHandler(
        filters.Regex(r'^‚ùì –ü–æ–º–æ—â—å$'), 
        bot.help_command
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
        )
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        unknown_message
    ))
    
    return application


async def set_bot_commands(application: Application):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    """
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("vote", "–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"),
        BotCommand("results", "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ]
    
    await application.bot.set_my_commands(commands)