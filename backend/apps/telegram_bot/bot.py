"""
Telegram Bot –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è"

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django —á–µ—Ä–µ–∑ ORM –∏ API.
"""

import logging
import asyncio
from typing import Dict, List, Optional

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    WebAppInfo,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

from django.conf import settings
from django.contrib.auth import get_user_model
from apps.users.models import User
from apps.sessions.models import VotingSession
from apps.telegram_bot.models import TelegramUser, BotMessage
from apps.telegram_bot.services import (
    TelegramUserService,
    VotingNotificationService,
    WebAppAuthService
)
from apps.core.utils import get_logger

logger = get_logger(__name__)
User = get_user_model()


class SmartAwardBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è"
    """
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.webapp_url = getattr(settings, 'TELEGRAM_WEBAPP_URL', 'https://your-domain.com/webapp')
        self.user_service = TelegramUserService()
        self.notification_service = VotingNotificationService()
        self.auth_service = WebAppAuthService()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = await self.user_service.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                chat_id=chat_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            system_user = await self.user_service.get_system_user(telegram_user)
            
            if system_user:
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\", {user.first_name}!\n\n"
                    f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {system_user.get_role_display()}\n"
                    f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {await self._get_active_sessions_count()}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            else:
                welcome_text = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\".\n"
                    "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
            
            keyboard = await self._get_main_keyboard(system_user)
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            await self._log_bot_interaction(
                telegram_user=telegram_user,
                action='start_command',
                details={'has_system_access': bool(system_user)}
            )
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def vote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vote - –æ—Ç–∫—Ä—ã—Ç–∏–µ WebApp –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        """
        user = update.effective_user
        
        try:
            telegram_user = await self.user_service.get_telegram_user(user.id)
            if not telegram_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                return
            
            system_user = await self.user_service.get_system_user(telegram_user)
            if not system_user or not system_user.active:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            active_session = await self._get_current_session()
            if not active_session:
                await update.message.reply_text(
                    "üìÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
            can_vote = await self._can_user_vote(system_user, active_session)
            if not can_vote:
                await update.message.reply_text(
                    "‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Å–µ—Å—Å–∏–∏."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebApp
            webapp = WebAppInfo(url=f"{self.webapp_url}?session_id={active_session.id}")
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üó≥Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                    web_app=webapp
                )
            ]])
            
            session_info = (
                f"üó≥Ô∏è **–°–µ—Å—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è #{active_session.id}**\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {active_session.start_date.strftime('%d.%m.%Y')} - "
                f"{active_session.end_date.strftime('%d.%m.%Y')}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {await self._get_session_participants_count(active_session)}\n"
                f"‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {await self._get_voted_count(active_session)}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:"
            )
            
            await update.message.reply_text(
                session_info,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in vote_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def results_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /results - –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = update.effective_user
        
        try:
            telegram_user = await self.user_service.get_telegram_user(user.id)
            if not telegram_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                return
            
            system_user = await self.user_service.get_system_user(telegram_user)
            if not system_user:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_results = await self._get_user_latest_results(system_user)
            
            if not user_results:
                await update.message.reply_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.\n"
                    "–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
                )
                return
            
            results_text = (
                f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–µ—Å—Å–∏—è #{user_results.session.id})**\n\n"
                f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: **{user_results.average_score:.2f}**\n"
                f"üèÜ –ú–µ—Å—Ç–æ: **{user_results.rank}**\n"
                f"üí∞ –ü—Ä–µ–º–∏—è: **{user_results.total_bonus:.2f} ‚ÇΩ**\n"
                f"üë• –ì–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: **{user_results.votes_received}**\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {user_results.session.start_date.strftime('%d.%m.%Y')} - "
                f"{user_results.session.end_date.strftime('%d.%m.%Y')}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ WebApp
            webapp = WebAppInfo(url=f"{self.webapp_url}/results")
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üìà –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    web_app=webapp
                )
            ]])
            
            await update.message.reply_text(
                results_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in results_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        help_text = (
            "ü§ñ **–ë–æ—Ç —Å–∏—Å—Ç–µ–º—ã \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\"**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/vote - –û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "/results - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "**–û —Å–∏—Å—Ç–µ–º–µ:**\n"
            "–°–∏—Å—Ç–µ–º–∞ \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\" –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ "
            "–æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–ª–ª–µ–≥ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10 –±–∞–ª–ª–æ–≤. "
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è "
            "—Ä–∞–∑–º–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–µ–º–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
            "üìß admin@company.com\n"
            "üìû +7 (xxx) xxx-xx-xx"
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        """
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user = query.from_user
        
        try:
            if data == 'current_session':
                await self._handle_current_session_callback(query, user)
            elif data == 'my_results':
                await self._handle_my_results_callback(query, user)
            elif data == 'help':
                await self._handle_help_callback(query)
            elif data.startswith('session_'):
                session_id = int(data.split('_')[1])
                await self._handle_session_details_callback(query, user, session_id)
                
        except Exception as e:
            logger.error(f"Error in button_callback: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _get_main_keyboard(self, system_user: Optional[User]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not system_user:
            return InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')
            ]])
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if system_user.active:
            active_session = await self._get_current_session()
            if active_session:
                can_vote = await self._can_user_vote(system_user, active_session)
                if can_vote:
                    webapp = WebAppInfo(url=f"{self.webapp_url}?session_id={active_session.id}")
                    keyboard.append([
                        InlineKeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", web_app=webapp)
                    ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
        keyboard.extend([
            [InlineKeyboardButton("üìä –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è", callback_data='current_session')],
            [InlineKeyboardButton("üìà –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='my_results')],
            [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def _get_active_sessions_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        from apps.sessions.models import VotingSession
        return await VotingSession.objects.filter(active=True).acount()
    
    async def _get_current_session(self) -> Optional[VotingSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é"""
        from apps.sessions.models import VotingSession
        from django.utils import timezone
        
        try:
            return await VotingSession.objects.filter(
                active=True,
                start_date__lte=timezone.now().date(),
                end_date__gte=timezone.now().date()
            ).afirst()
        except VotingSession.DoesNotExist:
            return None
    
    async def _can_user_vote(self, user: User, session: VotingSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —Å–µ—Å—Å–∏–∏"""
        from apps.sessions.models import SessionParticipant
        
        try:
            participant = await SessionParticipant.objects.aget(
                session=session,
                user=user
            )
            return participant.can_vote and participant.status == 'active'
        except SessionParticipant.DoesNotExist:
            return False
    
    async def _get_session_participants_count(self, session: VotingSession) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏"""
        return await session.participants.acount()
    
    async def _get_voted_count(self, session: VotingSession) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –≤ —Å–µ—Å—Å–∏–∏"""
        from apps.voting.models import Vote
        
        return await Vote.objects.filter(
            session=session
        ).values('voter').distinct().acount()
    
    async def _get_user_latest_results(self, user: User):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from apps.results.models import SessionResult
        
        try:
            return await SessionResult.objects.select_related('session').filter(
                user=user
            ).order_by('-session__end_date').afirst()
        except SessionResult.DoesNotExist:
            return None
    
    async def _log_bot_interaction(self, telegram_user, action: str, details: Dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"""
        try:
            await BotMessage.objects.acreate(
                telegram_user=telegram_user,
                message_type='command',
                content=action,
                metadata=details or {}
            )
        except Exception as e:
            logger.error(f"Failed to log bot interaction: {e}")
    
    # Callback handlers
    async def _handle_current_session_callback(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è'"""
        session = await self._get_current_session()
        if not session:
            await query.edit_message_text(
                "üìÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
            )
            return
        
        participants_count = await self._get_session_participants_count(session)
        voted_count = await self._get_voted_count(session)
        participation_rate = (voted_count / participants_count * 100) if participants_count > 0 else 0
        
        session_text = (
            f"üìä **–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è #{session.id}**\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {session.start_date.strftime('%d.%m.%Y')} - "
            f"{session.end_date.strftime('%d.%m.%Y')}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
            f"‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {voted_count}\n"
            f"üìà –£—á–∞—Å—Ç–∏–µ: {participation_rate:.1f}%\n\n"
        )
        
        if session.active:
            webapp = WebAppInfo(url=f"{self.webapp_url}?session_id={session.id}")
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üó≥Ô∏è –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", web_app=webapp)
            ]])
        else:
            keyboard = None
        
        await query.edit_message_text(
            session_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def _handle_my_results_callback(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'"""
        telegram_user = await self.user_service.get_telegram_user(user.id)
        system_user = await self.user_service.get_system_user(telegram_user)
        
        if not system_user:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ."
            )
            return
        
        results = await self._get_user_latest_results(system_user)
        if not results:
            await query.edit_message_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π."
            )
            return
        
        results_text = (
            f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**\n\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: **{results.average_score:.2f}**\n"
            f"üèÜ –ú–µ—Å—Ç–æ: **{results.rank}**\n"
            f"üí∞ –ü—Ä–µ–º–∏—è: **{results.total_bonus:.2f} ‚ÇΩ**\n"
            f"üë• –ì–æ–ª–æ—Å–æ–≤: **{results.votes_received}**"
        )
        
        webapp = WebAppInfo(url=f"{self.webapp_url}/results")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–µ–µ", web_app=webapp)
        ]])
        
        await query.edit_message_text(
            results_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def _handle_help_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø—Ä–∞–≤–∫–∞'"""
        help_text = (
            "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã \"–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è\" - "
            "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–Ω–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è "
            "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–π.\n\n"
            "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            "1Ô∏è‚É£ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
            "2Ô∏è‚É£ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç –∫–æ–ª–ª–µ–≥ –ø–æ —à–∫–∞–ª–µ 0-10\n"
            "3Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –∏ –ø—Ä–µ–º–∏–∏\n"
            "4Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/vote - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "/results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        
        await query.edit_message_text(
            help_text,
            parse_mode='Markdown'
        )


def create_bot_application() -> Application:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
    """
    bot = SmartAwardBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot.token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("vote", bot.vote_command))
    application.add_handler(CommandHandler("results", bot.results_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    application.add_handler(MessageHandler(
        filters.COMMAND & ~filters.COMMAND_REGEX(r"^/(start|vote|results|help)$"),
        unknown_command
    ))
    
    return application


async def set_bot_commands(application: Application):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram
    """
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("vote", "–û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"),
        BotCommand("results", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ]
    
    await application.bot.set_my_commands(commands)