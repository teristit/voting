"""
–ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ¬´–£–º–Ω–∞—è –ø—Ä–µ–º–∏—è¬ª

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç Django –º–æ–¥–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django Auth –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
"""

from django.contrib.auth.models import AbstractUser
from django.db import models
from django.core.validators import RegexValidator
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
import uuid


class User(AbstractUser):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    
    –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç AbstractUser Django –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—è
    """
    
    # –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ROLE_CHOICES = [
        ('user', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
        ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('super_admin', '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
    ]
    
    # –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω—ã–π'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'),
        ('on_leave', '–í –æ—Ç–ø—É—Å–∫–µ'),
        ('sick_leave', '–ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º'),
        ('suspended', '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    telegram_id = models.BigIntegerField(
        unique=True, 
        null=True, 
        blank=True,
        help_text="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram"
    )
    telegram_username = models.CharField(
        max_length=100, 
        null=True, 
        blank=True,
        help_text="Username –≤ Telegram (–±–µ–∑ @)"
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    middle_name = models.CharField(
        max_length=150, 
        blank=True,
        help_text="–û—Ç—á–µ—Å—Ç–≤–æ"
    )
    position = models.CharField(
        max_length=200, 
        blank=True,
        help_text="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
    )
    department = models.CharField(
        max_length=200, 
        blank=True,
        help_text="–û—Ç–¥–µ–ª"
    )
    employee_id = models.CharField(
        max_length=50, 
        unique=True, 
        null=True, 
        blank=True,
        help_text="–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    )
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    phone_validator = RegexValidator(
        regex=r'^\+?1?\d{9,15}$',
        message="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '+999999999'. –î–æ 15 —Ü–∏—Ñ—Ä."
    )
    phone = models.CharField(
        validators=[phone_validator], 
        max_length=17, 
        blank=True,
        help_text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    
    # –†–∞–±–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    role = models.CharField(
        max_length=20, 
        choices=ROLE_CHOICES, 
        default='user',
        help_text="–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"
    )
    status = models.CharField(
        max_length=20, 
        choices=STATUS_CHOICES, 
        default='active',
        help_text="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    hire_date = models.DateField(
        null=True, 
        blank=True,
        help_text="–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"
    )
    termination_date = models.DateField(
        null=True, 
        blank=True,
        help_text="–î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    can_vote = models.BooleanField(
        default=True,
        help_text="–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"
    )
    can_receive_votes = models.BooleanField(
        default=True,
        help_text="–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–∞"
    )
    voting_weight = models.DecimalField(
        max_digits=3, 
        decimal_places=2, 
        default=1.00,
        help_text="–í–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ 1.0)"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    permissions = JSONField(
        default=dict, 
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    preferences = JSONField(
        default=dict, 
        blank=True,
        help_text="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    metadata = JSONField(
        default=dict, 
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    last_vote_date = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"
    )
    last_login_telegram = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        help_text="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        help_text="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )
    
    class Meta:
        db_table = 'users'
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        ordering = ['last_name', 'first_name']
        indexes = [
            models.Index(fields=['telegram_id']),
            models.Index(fields=['role']),
            models.Index(fields=['status']),
            models.Index(fields=['department']),
            models.Index(fields=['employee_id']),
            models.Index(fields=['created_at']),
        ]
    
    def __str__(self):
        return self.get_full_name() or self.username
    
    def get_full_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parts = [self.last_name, self.first_name, self.middle_name]
        return ' '.join(filter(None, parts))
    
    def get_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        full_name = self.get_full_name()
        if full_name:
            return full_name
        return self.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{self.id}"
    
    def is_admin(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.role in ['admin', 'super_admin']
    
    def is_manager(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        return self.role in ['manager', 'admin', 'super_admin']
    
    def is_voting_eligible(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"""
        return (
            self.is_active and 
            self.status == 'active' and 
            self.can_vote
        )
    
    def is_vote_target_eligible(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        return (
            self.is_active and 
            self.status in ['active', 'on_leave'] and 
            self.can_receive_votes
        )
    
    def has_telegram_access(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Telegram"""
        return bool(self.telegram_id)
    
    def get_role_display_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        icons = {
            'user': 'üë§',
            'manager': 'üëî',
            'admin': 'üë®‚Äçüíº',
            'super_admin': 'üîë',
        }
        return icons.get(self.role, 'üë§')
    
    def get_status_display_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        icons = {
            'active': '‚úÖ',
            'inactive': '‚ùå',
            'on_leave': 'üèñÔ∏è',
            'sick_leave': 'üè•',
            'suspended': '‚è∏Ô∏è',
        }
        return icons.get(self.status, '‚ùì')
    
    def update_last_login_telegram(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram"""
        self.last_login_telegram = timezone.now()
        self.save(update_fields=['last_login_telegram'])
    
    def update_last_vote_date(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        self.last_vote_date = timezone.now()
        self.save(update_fields=['last_vote_date'])
    
    def get_permissions_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        return self.permissions.get('additional_permissions', [])
    
    def add_permission(self, permission: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        permissions = self.get_permissions_list()
        if permission not in permissions:
            permissions.append(permission)
            self.permissions['additional_permissions'] = permissions
            self.save(update_fields=['permissions'])
    
    def remove_permission(self, permission: str):
        """–£–¥–∞–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        permissions = self.get_permissions_list()
        if permission in permissions:
            permissions.remove(permission)
            self.permissions['additional_permissions'] = permissions
            self.save(update_fields=['permissions'])


class UserProfile(models.Model):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    
    user = models.OneToOneField(
        User, 
        on_delete=models.CASCADE, 
        related_name='profile'
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    avatar = models.ImageField(
        upload_to='avatars/', 
        null=True, 
        blank=True,
        help_text="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    birth_date = models.DateField(
        null=True, 
        blank=True,
        help_text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    )
    bio = models.TextField(
        max_length=500, 
        blank=True,
        help_text="–ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è"
    )
    
    # –†–∞–±–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    skills = JSONField(
        default=list, 
        blank=True,
        help_text="–ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"
    )
    achievements = JSONField(
        default=list, 
        blank=True,
        help_text="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã"
    )
    projects = JSONField(
        default=list, 
        blank=True,
        help_text="–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    total_votes_given = models.PositiveIntegerField(
        default=0,
        help_text="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"
    )
    total_votes_received = models.PositiveIntegerField(
        default=0,
        help_text="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"
    )
    average_rating = models.DecimalField(
        max_digits=4, 
        decimal_places=2, 
        default=0.00,
        help_text="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    )
    best_rating = models.DecimalField(
        max_digits=4, 
        decimal_places=2, 
        default=0.00,
        help_text="–õ—É—á—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ—Å—Å–∏—é"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled = models.BooleanField(
        default=True,
        help_text="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    email_notifications = models.BooleanField(
        default=True,
        help_text="Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    telegram_notifications = models.BooleanField(
        default=True,
        help_text="Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'user_profiles'
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å {self.user.get_display_name()}"
    
    def get_skills_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤"""
        return self.skills if isinstance(self.skills, list) else []
    
    def add_skill(self, skill: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤—ã–∫"""
        skills = self.get_skills_list()
        if skill not in skills:
            skills.append(skill)
            self.skills = skills
            self.save(update_fields=['skills'])
    
    def remove_skill(self, skill: str):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–≤—ã–∫"""
        skills = self.get_skills_list()
        if skill in skills:
            skills.remove(skill)
            self.skills = skills
            self.save(update_fields=['skills'])
    
    def calculate_rating_stats(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        from apps.results.models import SessionResult
        
        results = SessionResult.objects.filter(user=self.user)
        
        if results.exists():
            self.average_rating = results.aggregate(
                avg_rating=models.Avg('average_score')
            )['avg_rating'] or 0.00
            
            self.best_rating = results.aggregate(
                max_rating=models.Max('average_score')
            )['max_rating'] or 0.00
            
            self.save(update_fields=['average_rating', 'best_rating'])


class UserActivity(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    ACTION_CHOICES = [
        ('login', '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'),
        ('vote_cast', '–û—Ç–¥–∞—á–∞ –≥–æ–ª–æ—Å–∞'),
        ('session_view', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–∏'),
        ('results_view', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'),
        ('profile_update', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'),
        ('telegram_interaction', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º'),
        ('admin_action', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'),
    ]
    
    user = models.ForeignKey(
        User, 
        on_delete=models.CASCADE, 
        related_name='activities'
    )
    action = models.CharField(
        max_length=50, 
        choices=ACTION_CHOICES
    )
    description = models.TextField(
        blank=True,
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
    )
    metadata = JSONField(
        default=dict, 
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏"
    )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    ip_address = models.GenericIPAddressField(
        null=True, 
        blank=True,
        help_text="IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    user_agent = models.TextField(
        blank=True,
        help_text="User Agent –±—Ä–∞—É–∑–µ—Ä–∞"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'user_activities'
        verbose_name = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['user', '-created_at']),
            models.Index(fields=['action', '-created_at']),
        ]
    
    def __str__(self):
        return f"{self.user.get_display_name()} - {self.get_action_display()}"


# –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
from django.db.models.signals import post_save
from django.dispatch import receiver

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if hasattr(instance, 'profile'):
        instance.profile.save()