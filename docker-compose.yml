version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: smart_bonus_db
    environment:
      POSTGRES_DB: smart_bonus
      POSTGRES_USER: smart_bonus_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smart_bonus_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smart_bonus_user -d smart_bonus"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart_bonus_network

  # Redis для кэширования и фоновых задач
  redis:
    image: redis:7-alpine
    container_name: smart_bonus_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart_bonus_network

  # Backend Flask приложение
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_bonus_backend
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://smart_bonus_user:${POSTGRES_PASSWORD:-smart_bonus_password}@db:5432/smart_bonus
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - exports_data:/app/exports
      - backups_data:/app/backups
    networks:
      - smart_bonus_network
    restart: unless-stopped

  # Celery worker для фоновых задач
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_bonus_celery
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://smart_bonus_user:${POSTGRES_PASSWORD:-smart_bonus_password}@db:5432/smart_bonus
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - exports_data:/app/exports
      - backups_data:/app/backups
    networks:
      - smart_bonus_network
    restart: unless-stopped

  # Frontend Vue.js приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart_bonus_frontend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:5000/api/v1}
      - VITE_TELEGRAM_BOT_USERNAME=${VITE_TELEGRAM_BOT_USERNAME}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - smart_bonus_network
    restart: unless-stopped

  # Nginx reverse proxy (опционально для продакшна)
  nginx:
    image: nginx:alpine
    container_name: smart_bonus_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - smart_bonus_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  exports_data:
    driver: local
  backups_data:
    driver: local

networks:
  smart_bonus_network:
    driver: bridge
